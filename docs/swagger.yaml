openapi: 3.0.0
info:
  title: Product Catalog API
  version: 1.0.0
  description: RESTful API for managing products and categories in an e-commerce platform.
servers:
  - url: http://localhost:3000/api
paths:
  /products:
    post:
      summary: Create a new product
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductInput'
      responses:
        '201':
          description: Product created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Validation error
    get:
      summary: Get all products (with search/filter)
      parameters:
        - in: query
          name: name
          schema:
            type: string
        - in: query
          name: category
          schema:
            type: string
        - in: query
          name: minPrice
          schema:
            type: number
        - in: query
          name: maxPrice
          schema:
            type: number
        - in: query
          name: dateFrom
          schema:
            type: string
            format: date
        - in: query
          name: dateTo
          schema:
            type: string
            format: date
        - in: query
          name: page
          schema:
            type: integer
        - in: query
          name: limit
          schema:
            type: integer
      responses:
        '200':
          description: List of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
  /products/{id}:
    get:
      summary: Get a product by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Product found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
    put:
      summary: Update a product
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductInput'
      responses:
        '200':
          description: Product updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Validation error
        '404':
          description: Product not found
    delete:
      summary: Delete a product
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Product deleted
        '404':
          description: Product not found
  /products/report/low-stock:
    get:
      summary: Get low-stock products
      responses:
        '200':
          description: List of low-stock products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
  /categories:
    post:
      summary: Create a new category
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryInput'
      responses:
        '201':
          description: Category created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          description: Validation error
    get:
      summary: Get all categories
      responses:
        '200':
          description: List of categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
  /categories/{id}:
    get:
      summary: Get a category by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Category found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '404':
          description: Category not found
    put:
      summary: Update a category
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryInput'
      responses:
        '200':
          description: Category updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          description: Validation error
        '404':
          description: Category not found
    delete:
      summary: Delete a category
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Category deleted
        '404':
          description: Category not found
components:
  schemas:
    Product:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        description:
          type: string
        price:
          type: number
        category:
          $ref: '#/components/schemas/Category'
        variants:
          type: array
          items:
            $ref: '#/components/schemas/Variant'
        inventory:
          type: number
        discount:
          type: number
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    ProductInput:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        price:
          type: number
        category:
          type: string
        variants:
          type: array
          items:
            $ref: '#/components/schemas/Variant'
        inventory:
          type: number
        discount:
          type: number
    Variant:
      type: object
      properties:
        size:
          type: string
        color:
          type: string
        stock:
          type: number
    Category:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        description:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    CategoryInput:
      type: object
      properties:
        name:
          type: string
        description:
          type: string 